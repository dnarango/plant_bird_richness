model{
###################################################################################
#
#             Priors
#
###################################################################################
#Hyper-prior for community membership
#omega~dunif(0,1) 

for(s in 1:nspp){         # Species
   omega[s] ~ dunif(0,1)
   lpsi[s] ~ dnorm(0,0.01)
   lp[s] ~ dnorm(0,0.01)
}  #nspp
##################################################################################
#
# Likelihood
# Ecological model for true occurrence (process model)
#
##################################################################################
for (i in 1:nsites){
for(s in 1:nspp){   
for(k in F.yr[i]:L.yr[i]){ 
      w[i,s,k] ~ dbern(omega[s])                                                    						 	
      logit(psi[i,s,k])<-lpsi[s] 
      mu.psi[i,s,k]<-psi[i,s,k]*w[i,s,k]
      z[i,s,k] ~ dbern(mu.psi[i,s,k])
   }  #nsites
} #years
}     #nspp
##################################################################################
#
# Observation model for replicated detection/nondetection observations
#
##################################################################################
for (i in 1:nsites){
for(k in F.yr[i]:L.yr[i]){ 
  for(s in 1:nspp){
         logit(p[s,i,k])<-lp[s]
      for(j in 1:nmonth){
         p.eff[s,i,j,k] <- z[i,s,k] * p[s,i,k]
         y[i,j,k,s] ~ dbern(p.eff[s,i,j,k])
      } #nmonth
   }    #nsite
}       #nspp
}       #nyears
##################################################################################
#
# Derived quantities
#
##################################################################################
frac.amt <- 0.0000001 # this is added so that you never divide by 0

for (i in 1:nsites) {
for(k in F.yr[i]:L.yr[i]){
   Nsite[i,k] <- sum(z[i,,k]) # Number of occurring species at each site

##################################################################################
#
# Bird Conservation Index 
#                                                      
##################################################################################

#######################
# Functional Grouping # 
#######################
omnivore[i,k]  <- (sum(z[i,,k]*Functional[i,,1])+frac.amt)/(Nsite[i,k]+frac.amt)
bark.prober[i,k] <- (sum(z[i,,k]*Functional[i,,2])+frac.amt)/(Nsite[i,k]+frac.amt)
ground.gleaner[i,k] <- (sum(z[i,,k]*Functional[i,,3])+frac.amt)/(Nsite[i,k]+frac.amt)
lower.canopy[i,k] <- (sum(z[i,,k]*Functional[i,,4])+frac.amt)/(Nsite[i,k]+frac.amt)
upper.canopy[i,k] <- (sum(z[i,,k]*Functional[i,,5])+frac.amt)/(Nsite[i,k]+frac.amt)

##########################
# Compositional Grouping # 
##########################
pred.parasite[i,k]  <- (sum(z[i,,k]*Compositional[i,,1])+frac.amt)/(Nsite[i,k]+frac.amt)
exotic[i,k] <- (sum(z[i,,k]*Compositional[i,,2])+frac.amt)/(Nsite[i,k]+frac.amt)
resident[i,k] <- (sum(z[i,,k]*Compositional[i,,3])+frac.amt)/(Nsite[i,k]+frac.amt)
temp.migrant[i,k] <- (sum(z[i,,k]*Compositional[i,,4])+frac.amt)/(Nsite[i,k]+frac.amt)
single.brood[i,k] <- (sum(z[i,,k]*Compositional[i,,5])+frac.amt)/(Nsite[i,k]+frac.amt)

#######################
# Structural Grouping # 
#######################
forest.ground[i,k]  <- (sum(z[i,,k]*Structural[i,,1])+frac.amt)/(Nsite[i,k]+frac.amt)
open.ground[i,k] <- (sum(z[i,,k]*Structural[i,,2])+frac.amt)/(Nsite[i,k]+frac.amt)
shrub[i,k] <- (sum(z[i,,k]*Structural[i,,3])+frac.amt)/(Nsite[i,k]+frac.amt)
canopy[i,k] <- (sum(z[i,,k]*Structural[i,,4])+frac.amt)/(Nsite[i,k]+frac.amt)
forest.gen[i,k] <- (sum(z[i,,k]*Structural[i,,5])+frac.amt)/(Nsite[i,k]+frac.amt)
int.forest[i,k] <- (sum(z[i,,k]*Structural[i,,6])+frac.amt)/(Nsite[i,k]+frac.amt)


###########################
# Calc BCI based on ranks #
###########################
# Omnivore score #
rank[i,1,k] <- ifelse(omnivore[i,k] <= 0.29, 5, 
               ifelse(omnivore[i,k] > 0.29 && omnivore[i,k] <=0.41,4, 
               ifelse(omnivore[i,k]>0.41 && omnivore[i,k]<=0.48,3,
               ifelse(omnivore[i,k]>0.48 && omnivore[i,k]<=0.58,2,
               ifelse(omnivore[i,k]>0.58,1,0)))))

# bark prober score #
rank[i,2,k] <- ifelse(bark.prober[i,k]<=0.06, 1.5,
               ifelse(bark.prober[i,k]>0.06 && bark.prober[i,k]<=0.11,3,
               ifelse(bark.prober[i,k]>0.11 && bark.prober[i,k]<=0.17,4,
               ifelse(bark.prober[i,k]>0.17,5,0))))

# Ground gleaner score #
rank[i,3,k] <- ifelse(ground.gleaner[i,k]>=0 && ground.gleaner[i,k]<=0.05, 1.5,
               ifelse(ground.gleaner[i,k]>0.05 && ground.gleaner[i,k]<=0.07,2,
               ifelse(ground.gleaner[i,k]>0.07 && ground.gleaner[i,k]<=0.14,4.5,
               ifelse(ground.gleaner[i,k]>0.14,5,0))))

# lower canopy score #
rank[i,4,k] <- ifelse(lower.canopy[i,k] >=0 && lower.canopy[i,k] <=0.14, 1.5,
               ifelse(lower.canopy[i,k] >0.14 && lower.canopy[i,k] <=0.23,2.5,
               ifelse(lower.canopy[i,k] >0.23, 5, 0)))


# Upper canopy Score #
rank[i,5,k] <- ifelse(upper.canopy[i,k]>=0 && upper.canopy[i,k]<=0.03, 1.5,
                ifelse(upper.canopy[i,k]>0.03 && upper.canopy[i,k]<=0.05,2, 
                ifelse(upper.canopy[i,k]>0.05 && upper.canopy[i,k]<=0.12,3,
                ifelse(upper.canopy[i,k]>0.12 && upper.canopy[i,k]<=0.20,4.5,
                ifelse(upper.canopy[i,k]>0.20,5, 0)))))

# Predator Parasite Score #
rank[i,6,k] <- ifelse(pred.parasite[i,k]>=0 && pred.parasite[i,k]<=0.1, 5,
                ifelse(pred.parasite[i,k]>0.1 && pred.parasite[i,k]<=0.15,3.5,
                ifelse(pred.parasite[i,k]>0.15 && pred.parasite[i,k]<=0.18, 2,
                ifelse(pred.parasite[i,k]>0.18,1, 0))))

# Exoctic score #
rank[i,7,k] <- ifelse(exotic[i,k]==0, 5, 
               ifelse(exotic[i,k]>0 && exotic[i,k]<=0.02,4.5,
               ifelse(exotic[i,k]>0.02 && exotic[i,k]<=0.05,3,
               ifelse(exotic[i,k]>0.05 && exotic[i,k]<=0.11,2,
               ifelse(exotic[i,k]>0.11,1,0)))))

# Resident Score #
rank[i,8,k] <- ifelse(resident[i,k]>=0 && resident[i,k]<=0.26, 5,
                ifelse(resident[i,k]>0.26 && resident[i,k]<=0.39,3.5,
                ifelse(resident[i,k]>0.39 && resident[i,k]<=0.57, 2,
                ifelse(resident[i,k]>0.57,1, 0))))

# Temperate Migrant Score #
rank[i,9,k] <- ifelse(temp.migrant[i,k] >=0 && temp.migrant[i,k] <=0.21, 4,
                ifelse(temp.migrant[i,k] >0.21 && temp.migrant[i,k] <=0.3,2,
                ifelse(temp.migrant[i,k] >0.3,1,0)))

# Single Brood Score #
rank[i,10,k] <- ifelse(single.brood[i,k]>=0 && single.brood[i,k]<=0.41, 1.5,
                ifelse(single.brood[i,k]>0.41 && single.brood[i,k]<=0.45,2,
                ifelse(single.brood[i,k]>0.45 && single.brood[i,k]<=0.61,3,
                ifelse(single.brood[i,k]>0.61 && single.brood[i,k]<=0.73,4,
                ifelse(single.brood[i,k]>0.73,5, 0)))))

# Forest ground score #
rank[i,11,k] <-ifelse(forest.ground[i,k]==0, 1, 
              ifelse(forest.ground[i,k]>0.001 && forest.ground[i,k]<=0.02,1.5,
              ifelse(forest.ground[i,k]>0.02 && forest.ground[i,k]<=0.16,3, 
              ifelse(forest.ground[i,k]>0.16 && forest.ground[i,k]<=0.24,4.5,
              ifelse(forest.ground[i,k]>0.24,5,0)))))


# open ground score #
rank[i,12,k]<- ifelse(open.ground[i,k] >=0 && open.ground[i,k] <=0.02, 1,
               ifelse(open.ground[i,k] >0.02 && open.ground[i,k] <=0.11,2.5,
               ifelse(open.ground[i,k] >0.11, 5, 0)))


# Shrub Score #
    
rank[i,13,k] <- ifelse(shrub[i,k]>=0 && shrub[i,k]<=0.21, 4, 
                ifelse(shrub[i,k]>0.21 && shrub[i,k]<=0.33,1.5,
                ifelse(shrub[i,k]>0.33,1, 0)))

# Canopy nester score #
rank[i,14,k] <- ifelse(canopy[i,k]<=0.28, 1.5,
               ifelse(canopy[i,k]>0.28 && canopy[i,k]<=0.32,2,
               ifelse(canopy[i,k]>0.32,4.5,0)))



# Forest generalist score #
rank[i,15,k] <- ifelse(forest.gen[i,k] <=0.28, 4.5,
               ifelse(forest.gen[i,k] >0.28, 2.5,0))


# Forest Interior score #
rank[i,16,k] <- ifelse(int.forest[i,k]>=0 && int.forest[i,k]<=0.01, 1,
               ifelse(int.forest[i,k]>0.01 && int.forest[i,k]<=0.08,1.5, 
               ifelse(int.forest[i,k]>0.08 && int.forest[i,k]<=0.26,3,
               ifelse(int.forest[i,k]>0.26 && int.forest[i,k]<=0.43,4,
               ifelse(int.forest[i,k]>0.43, 5, 0)))))


BCI[i,k] <- sum(rank[i,,k])
 } #nsites
max.spp[i] <- max(Nsite[i,F.yr[i]:L.yr[i]])
BCI.score[i] <- max(BCI[i,F.yr[i]:L.yr[i]])
} #nyears

}